rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if the current user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'klegson48@gmail.com';
    }
  
    // Allow public access to user profiles for rankings
    match /users/{userId} {
      // Allow anyone to read basic user data for rankings
      allow read: if true;
      
      // Allow users to write to their own document
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // SIMPLIFIED RULE: Allow any authenticated user to update any user document
      // This is more permissive but will definitely allow friend operations
      allow update: if request.auth != null;
      
      // Allow admin to delete any user
      allow delete: if isAdmin();
    }

    // Allow authenticated users to read all posts and create new posts
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Allow delete if user is post author OR is admin
      allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
      // Allow updates for post author OR for likes/likedBy fields (for liking functionality) OR is admin
      allow update: if request.auth != null && (
        resource.data.authorId == request.auth.uid || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy'])) ||
        isAdmin()
      );
    }
    
    // Allow authenticated users to create problem reports
    match /problemReports/{reportId} {
      allow create: if request.auth != null;
      allow read: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
